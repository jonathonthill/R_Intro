- Class: meta
  Course: Intro to R for Biologists
  Lesson: Vectors
  Author: Jonathon Hill, Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 1.0.0

- Class: text
  Output: The simplest and most common data structure in R is the vector.

- Class: text
  Output: "Vectors come in two different flavors: atomic vectors and lists. An atomic
    vector contains exactly one data type, whereas a list may contain multiple data
    types. We'll explore atomic vectors further before we get to lists."

- Class: text
  Output: In previous lessons, we dealt entirely with numeric vectors, which are one
    type of atomic vector. Other types of atomic vectors include logical, 
    integer, double, character, complex, factor, raw. In this lesson, we'll take a 
    closer look at logical andcharacter vectors. We will tehn finish by talking 
    about how lists can combine vectors of various types.

- Class: text
  Output: Logical vectors can contain the values TRUE, FALSE, and NA (for 'not available').
    These values are generated as the result of logical 'conditions'. Let's experiment
    with some simple conditions.

- Class: cmd_question
  Output: First, create a numeric vector num_vect that contains the values 0.5, 55,
    -10, and 6.
  CorrectAnswer: num_vect <- c(0.5, 55, -10, 6)
  AnswerTests: omnitest(correctExpr='num_vect <- c(0.5, 55, -10, 6)')
  Hint: Recall that the c() function is used for creating a vector. If you forget
    how to use it, use ?c to access the help file. Don't forget to assign the result
    to a new variable called num_vect.

- Class: cmd_question
  Output: Now, create a variable called tf that gets the result of num_vect < 1, which
    is read as 'num_vect is less than 1'.
  CorrectAnswer: tf <- num_vect < 1
  AnswerTests: omnitest(correctExpr='tf <- num_vect < 1')
  Hint: Use tf <- num_vect < 1 to assign the result of num_vect < 1 to a variable
    called tf.

- Class: mult_question
  Output: What do you think tf will look like?
  CorrectAnswer: a vector of 4 logical values
  AnswerChoices: a vector of 4 logical values; a single logical value
  AnswerTests: omnitest(correctVal='a vector of 4 logical values')
  Hint: Remember our lesson on vector arithmetic? The theme was that R performs many
    operations on an element-by-element basis. We called these 'vectorized' operations.

- Class: cmd_question
  Output: Print the contents of tf now.
  CorrectAnswer: tf
  AnswerTests: omnitest(correctExpr='tf')
  Hint: Just type tf and press Enter to view the its value.

- Class: text
  Output: The statement num_vect < 1 is a condition and tf tells us whether each corresponding
    element of our numeric vector num_vect satisfies this condition.

- Class: text
  Output: The first element of num_vect is 0.5, which is less than 1 and therefore
    the statement 0.5 < 1 is TRUE. The second element of num_vect is 55, which is
    greater than 1, so the statement 55 < 1 is FALSE. The same logic applies for the
    third and fourth elements.

- Class: cmd_question
  Output: Let's try another. Type num_vect >= 6 without assigning the result to a
    new variable.
  CorrectAnswer: num_vect >= 6
  AnswerTests: omnitest(correctExpr='num_vect >= 6')
  Hint: Don't create a new variable on this one. We just want to see the result of
    num_vect >= 6. Make sure there is no space between the `>` and `=` symbols. Think
    of them as one symbol representing 'greater than or equal to'.

- Class: text
  Output: This time, we are asking whether each individual element of num_vect is
    greater than OR equal to 6. Since only 55 and 6 are greater than or equal to 6,
    the second and fourth elements of the result are TRUE and the first and third elements
    are FALSE.

- Class: text
  Output: The `<` and `>=` symbols in these examples are called 'logical operators'.
    Other logical operators include `>`, `<=`, `==` for exact equality, and `!=` for
    inequality.

- Class: text
  Output: If we have two logical expressions, A and B, we can ask whether at least
    one is TRUE with A | B (logical 'or' a.k.a. 'union') or whether they are both
    TRUE with A & B (logical 'and' a.k.a. 'intersection'). Lastly, !A is the negation
    of A and is TRUE when A is FALSE and vice versa.

- Class: text
  Output: It's a good idea to spend some time playing around with various combinations
    of these logical operators until you get comfortable with their use. We'll do
    a few examples here to get you started.

- Class: text
  Output: Try your best to predict the result of each of the following statements.
    You can use pencil and paper to work them out if it's helpful. If you get stuck,
    just guess and you've got a 50% chance of getting the right answer!

- Class: mult_question
  Output: (3 > 5) & (4 == 4)
  CorrectAnswer: 'FALSE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='FALSE')
  Hint: Break this problem down into 2 pieces. The `&` in the middle states that BOTH
    pieces are TRUE. Your job is to figure out if that is an accurate statement. If
    so, the entire condition is TRUE. If not, it's FALSE.

- Class: mult_question
  Output: (TRUE == TRUE) | (TRUE == FALSE)
  CorrectAnswer: 'TRUE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: Break this problem down into 2 pieces. The `|` in the middle states that AT
    LEAST ONE of the pieces is TRUE. Your job is to figure out if that is an accurate
    statement. If so, the entire condition is TRUE. If not, it's FALSE.

- Class: mult_question
  Output: ((111 >= 111) | !(TRUE)) & ((4 + 1) == 5)
  CorrectAnswer: 'TRUE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: This is a tricky one. Remember that the `!` symbol negates whatever comes
    after it. There's also an 'order of operations' going on here. Conditions that
    are enclosed within parentheses should be evaluated first. Then, work your way
    outwards.

- Class: text
  Output: Don't worry if you found these to be tricky. They're supposed to be. Working
    with logical statements in R takes practice, but your efforts will be rewarded
    in future lessons (e.g. subsetting and control structures).

- Class: text
  Output: Character vectors are also very common in R. Double quotes are used to distinguish
    character objects, as in the following example.

- Class: cmd_question
  Output: 'Create a character vector that contains the following words: "My", "name",
    "is". Remember to enclose each word in its own set of double quotes, so that
    R knows they are character strings. Store the vector in a variable called my_char.'
  CorrectAnswer: my_char <- c("My", "name", "is")
  AnswerTests: omnitest(correctExpr='my_char <- c("My", "name", "is")')
  Hint: Type my_char <- c("My", "name", "is") to create a new variable called my_char
    that contains a character vector of length 3. Make sure that the commas separating
    the words are OUTSIDE of the double quotes, or else R thinks the commas are part
    of the words.

- Class: cmd_question
  Output: Print the contents of my_char to see what it looks like.
  CorrectAnswer: my_char
  AnswerTests: omnitest(correctExpr='my_char')
  Hint: Type my_char to view its contents.

- Class: text
  Output: Right now, my_char is a character vector of length 3. Let's say we want
    to join the elements of my_char together into one continuous character string
    (i.e. a character vector of length 1). We can do this using the paste() function.

- Class: cmd_question
  Output: Type paste(my_char, collapse = " ") now. Make sure there's a space between
    the double quotes in the `collapse` argument. You'll see why in a second.
  CorrectAnswer: paste(my_char, collapse = " ")
  AnswerTests: omnitest(correctExpr='paste(my_char, collapse = " ")')
  Hint: Use paste(my_char, collapse = " ") to collapse the words in the vector so
    they almost form a sentence. There should be a single space between the double
    quotes in the `collapse` argument so that there are single spaces separating the
    words.

- Class: text
  Output: The `collapse` argument to the paste() function tells R that when we join
    together the elements of the my_char character vector, we'd like to separate them
    with single spaces.

- Class: text
  Output: It seems that we're missing something.... Ah, yes! Your name!

- Class: cmd_question
  Output: 'To add (or ''concatenate'') your name to the end of my_char, use the c()
    function like this: c(my_char, "your_name_here"). Place your name in double quotes
    where I''ve put "your_name_here". Try it now, storing the result in a new variable
    called my_name.'
  CorrectAnswer: my_name <- c(my_char, "Swirl")
  AnswerTests: var_is_a("character", "my_name"); expr_uses_func("c"); expr_creates_var("my_name");
    val_has_length(4)
  Hint: Tack your name on to the end of the my_char vector using the c() function.  Be
    sure to assign the result to a new variable called my_name. If your name was "Swirl",
    you would type my_name <- c(my_char, "Swirl").

- Class: cmd_question
  Output: Take a look at the contents of my_name.
  CorrectAnswer: my_name
  AnswerTests: omnitest(correctExpr='my_name')
  Hint: Type my_name and press Enter to view its contents.

- Class: cmd_question
  Output: Now, use the paste() function once more to join the words in my_name together
    into a single character string. Don't forget to say collapse = " "!
  CorrectAnswer: paste(my_name, collapse = " ")
  AnswerTests: omnitest(correctExpr='paste(my_name, collapse = " ")')
  Hint: Use paste(my_name, collapse = " ") to join all four words together, separated
    by single spaces.

- Class: text
  Output: In this example, we used the paste() function to collapse the elements of
    a single character vector. paste() can also be used to join the elements of multiple
    character vectors.

- Class: cmd_question
  Output: In the simplest case, we can join two character vectors that are each of
    length 1 (i.e. join two words). Try paste("Hello", "world!", sep = " "), where
    the `sep` argument tells R that we want to separate the joined elements with a
    single space.
  CorrectAnswer: paste("Hello", "world!", sep = " ")
  AnswerTests: omnitest(correctExpr='paste("Hello", "world!", sep = " ")')
  Hint: Enter paste("Hello", "world!", sep = " ") to join the two words "Hello" and
    "world", separated by a single space. There should be a single space between the
    double quotes in the `sep` argument to the paste() function.

- Class: cmd_question
  Output: For a slightly more complicated example, we can join two vectors, each of
    length 3. Use paste() to join the integer vector 1:3 with the character vector c("X", "Y", "Z"). This time, use sep
    = "" to leave no space between the joined elements.
  CorrectAnswer: paste(1:3, c("X", "Y", "Z"), sep = "")
  AnswerTests: any_of_exprs('paste(1:3, c("X", "Y", "Z"), sep = "")', 'paste(c(1:3), c("X", "Y", "Z"), sep = "")')
  Hint: Use paste(1:3, c("X", "Y", "Z"), sep = "") to see what happens when we join
    two vectors of equal length using paste().

- Class: text
  Output: 'What do you think will happen if our vectors are of different length? (Hint:
    we talked about this in a previous lesson.)'

- Class: cmd_question
  Output: Vector recycling! Try paste(LETTERS, 1:4, sep = "-"), where LETTERS is a
    predefined variable in R containing a character vector of all 26 letters in the
    English alphabet.
  CorrectAnswer: paste(LETTERS, 1:4, sep = "-")
  AnswerTests: omnitest(correctExpr='paste(LETTERS, 1:4, sep = "-")')
  Hint: Type paste(LETTERS, 1:4, sep = "-") to see how R recycles the vector 1:4 to  match
    the length of LETTERS. Notice we are using `-` as our separator this time instead
    of a single space.

- Class: text
  Output: Since the character vector LETTERS is longer than the numeric vector 1:4,
    R simply recycles, or repeats, 1:4 until it matches the length of LETTERS.

- Class: text
  Output: Also worth noting is that the numeric vector 1:4 gets 'coerced' into a character
    vector by the paste() function.

- Class: text
  Output: We'll discuss coercion in another lesson, but all it really means that the
    numbers 1, 2, 3, and 4 in the output above are no longer numbers to R, but rather
    characters "1", "2", "3", and "4".
    
- Class: text
  Output: This highlights an important principle of vectors. They can only 
    contain one data type. If any value is a character, for example, then all 
    values have to be a character. R will automatically set the type to one that 
    works for all the values (called coercion). You can also create, check and 
    convert vectors manually.
    
- Class: cmd_question
  Output: >
    Remember, there are six types in R: logical, integer (including factors), 
    numeric (called double in other programming languages), character, complex, 
    and raw. Each of these types has three basic functions associated 
    with it. First, to create or convert a specific type of vector simply use 
    a function with as followed by a dot and the name of the type: as.logical(),
    as.integer(), as.numeric(), as.character(), etc. The argument is simply a 
    vector with the values you want to include. Make a character vector with 
    the numbers 1:6. Save it to the variable num_chars.
  CorrectAnswer: num_char <- as.character(1:6)
  AnswerTests: omnitest(correctExpr='num_char <- as.character(1:6)')
  Hint: A vector with number 1:6 can be created by simply typing 1:6. place that 
    as an argumnet to as.character(). Don't foget to include num_char <- to save 
    the result.
  
- Class: cmd_question
  Output: >
    Similarly, you can also test if an existing vector is a certain type. 
    This is done with a function with the format is.type(vetctor_to_test). 
    For example, to test if num_char is an integer vector.
  CorrectAnswer: is.integer(num_char)
  AnswerTests: omnitest(correctExpr='is.integer(num_char)')
  Hint: The correct format is "is.integer(num_char)".

- Class: cmd_question
  Output: Now, test if num_char is a character vector. 
  CorrectAnswer: is.character(num_char)
  AnswerTests: omnitest(correctExpr='is.character(num_char)')
  Hint: The correct format is "is.character(num_char)".
  
- Class: cmd_question
  Output: >
    Finally, it is also possible to simply ask what type a vector is. This is 
    done with the function typeof(). Find out the type of num_char.
  CorrectAnswer: typeof(num_char)
  AnswerTests: omnitest(correctExpr='typeof(num_char)')
  Hint: The correct format is "typeof(num_char)".

- Class: cmd_question
  Output: >
    Another way to find the type is by using the structure function str(). This 
    function is a great way to find out information about the structure of any 
    object and works on any save variable, regardless of type or complexity. 
    Use str() on num_char.
  CorrectAnswer: str(num_char)
  AnswerTests: omnitest(correctExpr='str(num_char)')
  Hint: The correct format is "str(num_char)".

- Class: text
  Output: The str output has three parts the first is an abbreviation for the 
    type (chr = character). The next tells you the dimensions of the object, and 
    finally it will show the values. If the list is long, it will only show the 
    first few values to conserve space. This information can be very useful when 
    exploring the outputs of various functions. We will use it extensively.
    
- Class: text
  Output: What if you have a collection of different types that you want to save 
    to a single variable? For that, you need a list. Lists can be thought of as 
    a collection of buckets, and each bucket can hold any object type, regardless 
    of what is in the other buckets. 
    
- Class: cmd_question
  Output: To illustrate, let's make a list with two items--the 
    numbers 1:10 and the letters of the alphabet. We create the list using the 
    list() function and give it the items we want stored as arguments. For 
    example, create a list using the command list(1:10, LETTERS) and save it 
    as basic_facts. 
  CorrectAnswer: basic_facts <- list(1:10, LETTERS)
  AnswerTests: omnitest(correctExpr='basic_facts <- list(1:10, LETTERS)')
  Hint: The correct format is "basic_facts <- list(1:10, LETTERS)".

- Class: cmd_question
  Output: Now, let's look at the list by simply typing its name.
  CorrectAnswer: basic_facts
  AnswerTests: omnitest(correctExpr='basic_facts')
  Hint: Simply type basic_facts

- Class: cmd_question
  Output: We can get more detailed information by using the str(), like we did 
    with vectors.
  CorrectAnswer: str(basic_facts)
  AnswerTests: omnitest(correctExpr='str(basic_facts)')
  Hint: Simply type str(basic_facts)
  
- Class: text
  Output: Notice that the str shows a list of 2 and then provides the vector 
    information for each.
    
## List of lists

## empty lists and vectors

- Class: text
  Output: That is it for vectors and lists. They are extremely important data structures 
    in R and are the building blocks for most other data structures, so make 
    sure you are comfortable with them. Next time, we will look at
    how to add, remove, and subset values from these structures.
